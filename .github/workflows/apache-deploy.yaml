name: Deploy Apache Web Server

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  APACHE_ROOT: /var/www/html
  WEBSITE_DIR: ${{ github.workspace }}/public-html

jobs:
  deploy:
    name: Deploy to Apache Web Server
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # Add deployment protection
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Optimize checkout performance

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apache-config/**') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache website files
        uses: actions/cache@v3
        with:
          path: ${{ env.WEBSITE_DIR }}
          key: ${{ runner.os }}-website-${{ hashFiles('${{ env.WEBSITE_DIR }}/**') }}
          restore-keys: |
            ${{ runner.os }}-website-

      - name: Install Apache and security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2 apache2-utils
          # Verify Apache installation
          apache2 -v
          # Install security headers module
          sudo a2enmod headers
          sudo a2enmod ssl

      - name: Configure Apache security
        run: |
          # Add security headers
          sudo tee /etc/apache2/conf-available/security-headers.conf << 'EOF'
          Header always set X-Content-Type-Options "nosniff"
          Header always set X-Frame-Options "SAMEORIGIN"
          Header always set X-XSS-Protection "1; mode=block"
          Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
          EOF
          sudo a2enconf security-headers

      - name: Copy and verify website files
        id: deploy
        run: |
          # Debug: Check if source directory exists and list its contents
          echo "Checking source directory..."
          ls -la ${{ env.WEBSITE_DIR }} || echo "Source directory not found"
          
          # Create backup of current deployment
          echo "Creating backup..."
          sudo cp -r ${{ env.APACHE_ROOT }} ${{ env.APACHE_ROOT }}.backup
          
          # Copy new files
          echo "Copying new files..."
          sudo cp -r ${{ env.WEBSITE_DIR }}/* ${{ env.APACHE_ROOT }}/
          sudo chown -R www-data:www-data ${{ env.APACHE_ROOT }}
          
          # Verify file integrity with better error handling
          echo "Verifying file integrity..."
          
          # Get list of files in source directory
          echo "Listing source files..."
          find ${{ env.WEBSITE_DIR }} -type f -print > /tmp/source_files
          cat /tmp/source_files
          
          # Get list of files in destination directory
          echo "Listing destination files..."
          find ${{ env.APACHE_ROOT }} -type f -print > /tmp/dest_files
          cat /tmp/dest_files
          
          # Compare file lists
          echo "Comparing file lists..."
          if ! diff /tmp/source_files /tmp/dest_files > /dev/null; then
            echo "File lists don't match. Differences:"
            diff /tmp/source_files /tmp/dest_files
            exit 1
          fi
          
          # Compare file contents
          echo "Comparing file contents..."
          while IFS= read -r file; do
            rel_path=${file#${{ env.WEBSITE_DIR }}/}
            dest_file="${{ env.APACHE_ROOT }}/$rel_path"
            if ! cmp -s "$file" "$dest_file"; then
              echo "Files differ: $rel_path"
              exit 1
            fi
          done < /tmp/source_files
          
          echo "File integrity check passed"
          
          # Set proper permissions
          echo "Setting permissions..."
          sudo find ${{ env.APACHE_ROOT }} -type d -exec chmod 755 {} \;
          sudo find ${{ env.APACHE_ROOT }} -type f -exec chmod 644 {} \;

      - name: Restart Apache
        run: |
          sudo systemctl restart apache2
          # Wait for Apache to be fully started
          sleep 5
          # Verify Apache is running
          if ! systemctl is-active --quiet apache2; then
            echo "Apache failed to start"
            exit 1
          fi

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          sudo rm -rf ${{ env.APACHE_ROOT }}/*
          sudo cp -r ${{ env.APACHE_ROOT }}.backup/* ${{ env.APACHE_ROOT }}/
          sudo systemctl restart apache2
